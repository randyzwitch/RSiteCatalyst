% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CalculatedMetrics_Get.R
\name{CalculatedMetrics_Get}
\alias{CalculatedMetrics_Get}
\title{Get Calculated Metrics via the 1.4 API CalculatedMetrics.Get method}
\usage{
CalculatedMetrics_Get(accessLevel = NULL, fields = NULL, selected = NULL,
  sort = NULL, filters = NULL, collapse_simple = TRUE)
}
\arguments{
\item{accessLevel}{(optional) A character vector of length 1. Must be one of \code{all, shared, owned}. 
If not specified, defaults to \code{owned}; \code{all} can only be used by an admin.}

\item{fields}{(optional) A character vector denoting the quantity, depth, and general detail of information desired. 
Must be one of 
\code{tags, shares, description, owner, modified, compatibility, favorite, reportSuiteID, definition}. 
The API always includes \code{id} and \code{name}, by default.}

\item{selected}{(optional) A character vector of ID(s) you wish to query for. If both \code{selected} and 
\code{accessLevel} are provided, \code{selected} take precedence.}

\item{sort}{(optional) A character vector of length 1. Must be one of \code{id, name, description, reportSuiteID,
owner, modified, favorite}. If not specified, defaults to \code{id}.}

\item{filters}{(optional) A named \code{list}. Valid names include
\code{approved, favorite, name, owner, reportSuiteID, tags}. For \code{tags}, character vectors of length > 1 are supported, 
and will be collapsed into comma-separated vectors of length 1 per API requirements. For the other fields, the API supports 
only vectors of length 1.}

\item{collapse_simple}{Should we parse simple list-columns, i.e. \code{tags} and \code{compatibility} in the return
value? Defaults to \code{TRUE} and only applies if these columns are requested via \emph{fields}}
}
\value{
A \code{data.frame}; the number of rows corresponds to the number of unique \code{id}s.
With default settings, a successful return will contain two fields, \code{id} and \code{name}. 

If requested (via \emph{fields}), the following columns are returned as list-columns of varying complexity:

\itemize{
\item{tags*}
\item{compatibility*}
\item{shares}
\item{definition}
}

\code{tags} and \code{compatibility} are called out because they are, by default, automatically collapsed into 
atomic vectors (i.e. unnested columns) if requested within \emph{fields}. Collapsing is performed by 
\code{\link{collapse_simple_target}}. 

Please see \code{\link{parse_shares}} for handling shares.
}
\description{
Get calculated metrics information with different search criteria and return options
}
\details{
It is possible to constrain results at the reportsuite ID (and more) level through the new \emph{filters}
argument. Note that \emph{filters} has some nuances; there are six fields, which are grouped by argument length,
then type, below:

\itemize{
\itemize{length 1, \code{character}; partial case-insensitive matching
    \item{name}
    \item{owner}
    \item{reportSuiteID}
    }
\itemize{length 1, \code{logical} (or coercible to logical, without
          generating \code{NA}); \code{TRUE}/\code{FALSE} selection
    \item{approved}
    \item{favorite}
    }
\itemize{> length 1, \code{character}; exact matching
    \item{tags}
    }
}

The \code{filters} argument as a whole is optional, but if used, the input must be a named list, where
the name(s) denote the field(s) to filter, by the provided value. Of the six available fields, only 
\code{tags} accepts inputs of length \code{>1}. Passing vectors of length \code{>1} to any of the other
fields will raise an error.
}
\section{Definition Parsing}{

This is not yet ready for Calculated Metrics.
}

\section{API Method Info}{

This function calls the Adobe Analytics 1.4
\href{https://marketing.adobe.com/developer/documentation/segments-1-4/calculated-metrics}{CalculatedMetrics.Get}
method, which supercedes the deprecated \emph{ReportSuite.GetCalculatedMetrics} method. 
The \emph{CalculatedMetrics_Get} method, and therefore this function, 
allows essentially all available information about one or more calculated metrics to be returned.

As such, it is now possible to download one or more complete calculated metric definitions, which
may be useful for batch auditing, back-up, and much more. Note, though, that \emph{CalculatedMetrics.Get}
operates at the calculated metrics ownership level, as opposed to the reportsuite ID level, 
which means this is not a strict replacement for the (deprecated) \emph{ReportSuite.GetCalculatedMetrics} method.

If this function is called with \code{accessLevel = "all"} by a non-admin, the following error message is
returned:

\code{ERROR: Bad Request  -  invalid accessLevel, only an admin user can request "all" Calculated Metrics}
}

\section{Access Privileges}{
 
This function calls an Adobe Analytics method that requires administrative/elevated privileges for
some or all functionality.
}

\examples{
\dontrun{
# Get all calculated metrics you own
CalculatedMetrics_Get()

# Get all calculated metrics that are shared with you
CalculatedMetrics_Get(accessLevel = "shared")

# Get all calculated metrics, period
# Note this requires admin privileges
CalculatedMetrics_Get(accessLevel = "all")

# To constrain at report suite level
CalculatedMetrics_Get(filters = list(reportSuiteID = "your_rsid"))

# Parsing is needed for certain fields, in particular 'definition'
# This returns some nested fields, but tags and compatibility are collapsed automatically...
needs_parsing_1 <- CalculatedMetrics_Get(fields = c("tags", "shares", "compatibility"))
# ...unless you request otherwise
needs_parsing_1_alt <- CalculatedMetrics_Get(fields = c("tags", "shares", "compatibility"), 
                                         collapse_simple = FALSE
)

# `definition` is the most complex
needs_parsing_2 <- CalculatedMetrics_Get(fields = c("definition"))

# Here's what it looks like if we ask for all fields
needs_parsing_3 <- CalculatedMetrics_Get(fields = c("compatibility", "definition", 
                                                "favorite", "modified", 
                                                "owner", "reportSuiteID", 
                                                "shares", "tags")
)

}
}
